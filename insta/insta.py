# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Insta
                                 A QGIS plugin
 Import and preview Insta 360 files to a QGIS layer
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-04-09
        git sha              : $Format:%H$
        copyright            : (C) 2023 by fdo bad
        email                : fbadilla@ing.uchile.cl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path
from pathlib import Path
from subprocess import Popen, PIPE
from shlex import split as shlex_split
from logging import warning
from sys import platform
import numpy as np
from pandas import Timestamp, DataFrame
from pandas import read_csv

from qgis.core import Qgis, QgsFeature, QgsMessageLog, QgsVectorLayer, QgsGeometry, QgsPointXY, QgsProject, QgsCoordinateReferenceSystem
from qgis.PyQt.QtCore import QCoreApplication, QSettings, QTranslator
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis import processing

# Import the code for the dialog
from .insta_dialog import InstaDialog
# Initialize Qt resources from file resources.py
from .resources import *

MSGCAT = 'blitoPa'

class Insta:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Insta_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Insta 360 importer')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Insta', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)
        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        icon_path = ':/plugins/insta/icon16.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Insta360 importer'),
            callback=self.run,
            parent=self.iface.mainWindow())
        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Insta 360 importer'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""
        if self.first_start:
            self.first_start = False
            self.dlg = InstaDialog()
            QgsProject.instance().homePathChanged.connect( self.slot_homePathChanged)
            QgsMessageLog.logMessage( 'Dialog created', MSGCAT , Qgis.Info)
        self.dlg.show()
        result = self.dlg.exec_()
        if result:
            apath = self.dlg.mQgsFileWidget.filePath()
            QgsMessageLog.logMessage('Reading media from '+apath, MSGCAT , Qgis.Info)
            #TODO check if exif csv exists, compare length to files
            exec_exiftool( apath, self.plugin_dir)
            QgsMessageLog.logMessage('Extracted metadata to exiftool_output.csv', MSGCAT , Qgis.Info)
            #TODO check if import csv exists, compare nans length to files
            proc_exiftool_output(apath)
            QgsMessageLog.logMessage('Processed metadata to import_me.csv', MSGCAT , Qgis.Info)
            layer_from_file( apath, self.plugin_dir)
            QgsMessageLog.logMessage('Loaded layer', MSGCAT , Qgis.Info)
            QgsMessageLog.logMessage('All Done', MSGCAT , Qgis.Success)
            return
        QgsMessageLog.logMessage( 'Dialog closed, no action', MSGCAT , Qgis.Info)

    def slot_homePathChanged(self, *args, **kwargs):
        self.dlg.mQgsFileWidget.setFilePath(QgsProject.instance().absolutePath())
        QgsMessageLog.logMessage('Project homePath changed, changing folder chooser too...', MSGCAT , Qgis.Info)

def exec_exiftool(apath, plugin_dir):
    try:
        if platform=='linux':
            wd = Path(plugin_dir,'Image-ExifTool-12.62')
            # filepath -> ImageDescription
            pre = r"""./exiftool -s -ee3 -p '$filepath,${CreateDate;DateFmt("%s")},${gpslatitude#},${gpslongitude#},${gpsaltitude#}' -ext insp """
            post = r""" 2>/dev/null | tee """
            #cmd = shlex_split(pre+apath+post+str(Path(apath,'exiftool_output.csv')))
            cmd = pre+apath+post+str(Path(apath,'exiftool_output.csv'))
            QgsMessageLog.logMessage(f'cmd {cmd}', MSGCAT , Qgis.Debug)
            process = Popen( cmd, stdout=PIPE, stderr=PIPE, cwd=wd, shell=True)
            stdout, stderr = process.communicate()
        QgsMessageLog.logMessage(f'stdout {stdout}', MSGCAT , Qgis.Debug)
        QgsMessageLog.logMessage(f'stderr {stderr}', MSGCAT , Qgis.Debug)
    except Exception as e:
        QgsMessageLog.logMessage( f"Problem procesing exiftool output: {e}", MSGCAT , Qgis.Critical)

def proc_exiftool_output(apath):
    """ load exiftool_output.csv
        flag and interpolate missing geoloc data
        write import_me.csv
    """
    try:
        #apath=Path.cwd()
        df = read_csv(Path(apath,'exiftool_output.csv'), names=['filename','datetime','lat','lon','ele'], sep=',')
        QgsMessageLog.logMessage( f'{len(df)} rows found', MSGCAT , Qgis.Info)
        df['tag']=((df['lat']!=0)|(df['lon']!=0)).astype(np.int64)
        for col in ['lat','lon','ele']:
            df[col] = df[col].apply( lambda x: np.nan if x==0 else x)
        QgsMessageLog.logMessage( f"{df['tag'].sum()} tag sum", MSGCAT , Qgis.Info)
        df.sort_values('datetime', inplace=True)
        df.index = df.datetime
        #df[['lat','lon','ele']] = df[['lat','lon','ele']].interpolate(method='polynomial', order=5, limit_direction='both')
        df[['lat','lon','ele']] = df[['lat','lon','ele']].interpolate()
        df.to_csv(Path(apath,'import_me.csv'),sep=',')
    except Exception as e:
        QgsMessageLog.logMessage( f"Problem procesing exiftool output: {e}", MSGCAT , Qgis.Critical)

def layer_from_file(apath, plugin_dir):
    """ processing toolbox create points from csv
        load style
        add to layer
    """
    try:
        output = processing.run('qgis:createpointslayerfromtable',{ 'INPUT' : str(Path(apath,'import_me.csv')), 'MFIELD' : None, 'OUTPUT' : str(Path(apath,'blitopa.gpkg')), 'TARGET_CRS' : QgsCoordinateReferenceSystem('EPSG:4326'), 'XFIELD' : 'lon', 'YFIELD' : 'lat', 'ZFIELD' : 'ele', 'MFIELD' : 'datetime' })['OUTPUT']
        
        QgsMessageLog.logMessage( f"Createpointslayerfromtable created {output}", MSGCAT , Qgis.Info)
        vectorLayer = QgsVectorLayer( str(Path(apath,'blitopa.gpkg'))+'|layername=blitopa', MSGCAT)
        vectorLayer.loadNamedStyle( str(Path(plugin_dir, 'points_layerStyle.qml')))
        QgsProject.instance().addMapLayer(vectorLayer)
    except Exception as e:
        QgsMessageLog.logMessage( f"Problem procesing exiftool output: {e}", MSGCAT , Qgis.Critical)

# TODO
# InstaDoIt to qgsTask
# shlex smarter
# exiftool disable warnings
# preguntarle al ivan cuanto cuesta leerlo rapido

class InstaDoIt:
    def __init__(self, img_dir, plugin_dir):
        self.exif_dir = Path( plugin_dir) / 'exiftool'
        self.img_dir = Path(img_dir)
        self.img_cmd = "./exiftool -ee3 -p '${DateTimeOriginal} ${gpslatitude#} ${gpslongitude#} ${gpsaltitude#}' "
        self.image_file_list = sorted( self.img_dir.glob('*.insp'))
        self.vl = QgsVectorLayer("Point?crs=epsg:4326&field=filename:string&field=elevation:float&field=date:datetime",MSGCAT, "memory")
        QgsMessageLog.logMessage( f'{len(self.image_file_list)} .insp files found', MSGCAT , Qgis.Info)

    def check(self):
        if self.image_file_list:
            return True
        return False

    def doit(self):
        #df = DataFrame( columns=('datetime','filename','lat','lon','ele'))
        feats = []
        for i,afile in enumerate(self.image_file_list):
            #QgsMessageLog.logMessage( f'{i}', MSGCAT , Qgis.Info)
            cmd = self.img_cmd + f"'{afile}'"
            #print('cmd',cmd)
            #QgsMessageLog.logMessage( f'{i} {cmd}', MSGCAT , Qgis.Info)
            process = Popen( shlex_split(cmd), stdout=PIPE, stderr=PIPE, cwd=self.exif_dir)
            stdout, stderr = process.communicate()
            #print('stdout',stdout)#.decode().replace('\n',''))
            #print('stdout',stdout.decode().split())#.decode().replace('\n',''))
            #QgsMessageLog.logMessage( f'{i} {cmd} {stdout} {stderr}', MSGCAT , Qgis.Info)
            date,time,lat,lon,ele = stdout.decode().split()
            if lat=='0' and lon=='0':
                continue
            dt = Timestamp(date.replace(':','-')+' '+time).isoformat(timespec='seconds')
            #df.loc[i] = [dt, afile.stem, np.float32(lat), np.float32(lon), np.float32(ele)]

            f = QgsFeature()
            f.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(np.float32(lon), np.float32(lat))))
            #f.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(np.float32(lat), np.float32(lon))))
            f.setId(i)
            f.setAttributes([afile.stem, np.float32(ele), dt]) #QDateTime(QDate(2020, 5, 4), QTime(12, 13, 14)), QDate(2020, 5, 2), QTime(12, 13, 1)])
            feats += [f]
            #if i>50:
            #    break

        #QgsMessageLog.logMessage( f'{df}', MSGCAT , Qgis.Info)
        self.vl.dataProvider().addFeatures(feats)
        return self.vl
